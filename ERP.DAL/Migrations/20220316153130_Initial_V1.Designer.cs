// <auto-generated />
using System;
using ERP.DAL.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.DAL.Migrations
{
    [DbContext(typeof(ERPDbContext))]
    [Migration("20220316153130_Initial_V1")]
    partial class Initial_V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ERP.Entities.Models.Buy", b =>
                {
                    b.Property<int>("BuyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OfferForSaleId")
                        .HasColumnType("int");

                    b.HasKey("BuyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OfferForSaleId");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("ERP.Entities.Models.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostId"), 1L, 1);

                    b.Property<decimal>("BankCommission")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FirmCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CostId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("ERP.Entities.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(64)
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ERP.Entities.Models.CustomerBankAccount", b =>
                {
                    b.Property<int>("CustomerBankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerBankAccountId"), 1L, 1);

                    b.Property<int>("AccountNumber")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("MoneyInAccount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CustomerBankAccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerPaymentId");

                    b.ToTable("CustomerBankAccounts");
                });

            modelBuilder.Entity("ERP.Entities.Models.CustomerPayment", b =>
                {
                    b.Property<int>("CustomerPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerPaymentId"), 1L, 1);

                    b.Property<decimal>("AmountPay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BuyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.HasKey("CustomerPaymentId");

                    b.HasIndex("BuyId");

                    b.ToTable("CustomerPayments");
                });

            modelBuilder.Entity("ERP.Entities.Models.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("DealerId");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerBankAccount", b =>
                {
                    b.Property<int>("DealerBankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerBankAccountId"), 1L, 1);

                    b.Property<int>("AccountNumber")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("FinanceDepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("MoneyInAccount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DealerBankAccountId");

                    b.HasIndex("DealerId");

                    b.HasIndex("FinanceDepartmentId");

                    b.ToTable("DealerBankAccounts");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerPayment", b =>
                {
                    b.Property<int>("DealerPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerPaymentId"), 1L, 1);

                    b.Property<decimal>("AmountPay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.HasKey("DealerPaymentId");

                    b.HasIndex("DealerId");

                    b.ToTable("DealerPayments");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductDemand", b =>
                {
                    b.Property<int>("DealerProductDemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerProductDemandId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DealerProductDemandId");

                    b.HasIndex("DealerId");

                    b.HasIndex("ProductId");

                    b.ToTable("DealerProductDemands");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductFeatureSuggestion", b =>
                {
                    b.Property<int>("DealerProductFeatureSuggestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerProductFeatureSuggestionId"), 1L, 1);

                    b.Property<int>("DealerProductDemandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("DealerProductFeatureSuggestionId");

                    b.HasIndex("DealerProductDemandId");

                    b.HasIndex("ProductFeaturesId");

                    b.ToTable("DealerProductFeatureSuggestions");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductSale", b =>
                {
                    b.Property<int>("DealerProductSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerProductSaleId"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("DealerProductSaleId");

                    b.HasIndex("StockId");

                    b.ToTable("DealerProductSales");
                });

            modelBuilder.Entity("ERP.Entities.Models.FinanceDepartment", b =>
                {
                    b.Property<int>("FinanceDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinanceDepartmentId"), 1L, 1);

                    b.Property<decimal>("EmployeePayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentConfirmationId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasingDepartmentPriceId")
                        .HasColumnType("int");

                    b.HasKey("FinanceDepartmentId");

                    b.HasIndex("PaymentConfirmationId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PurchasingDepartmentPriceId");

                    b.ToTable("FinanceDepartments");
                });

            modelBuilder.Entity("ERP.Entities.Models.OfferForSale", b =>
                {
                    b.Property<int>("OfferForSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferForSaleId"), 1L, 1);

                    b.Property<int>("DealerProductSaleId")
                        .HasColumnType("int");

                    b.HasKey("OfferForSaleId");

                    b.HasIndex("DealerProductSaleId");

                    b.ToTable("OfferForSales");
                });

            modelBuilder.Entity("ERP.Entities.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<int>("DealerPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDeliveryId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("DealerPaymentId");

                    b.HasIndex("ProductDeliveryId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ERP.Entities.Models.PaymentConfirmation", b =>
                {
                    b.Property<int>("PaymentConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentConfirmationId"), 1L, 1);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerBankAccountId")
                        .HasColumnType("int");

                    b.HasKey("PaymentConfirmationId");

                    b.HasIndex("CustomerBankAccountId");

                    b.ToTable("PaymentConfirmations");
                });

            modelBuilder.Entity("ERP.Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ERP.Entities.Models.ProductDelivery", b =>
                {
                    b.Property<int>("ProductDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDeliveryId"), 1L, 1);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductDeliveryId");

                    b.ToTable("ProductDeliveries");
                });

            modelBuilder.Entity("ERP.Entities.Models.ProductFeature", b =>
                {
                    b.Property<int>("ProductFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductFeatureId"), 1L, 1);

                    b.Property<int>("Appearance")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("Availabiliyt")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("CriterionNote")
                        .HasPrecision(2, 2)
                        .HasColumnType("int");

                    b.Property<int>("Functionality")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("Innovation")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("PriceAdvantage")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("ProductFeatureId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("ERP.Entities.Models.PurchasingDepartment", b =>
                {
                    b.Property<int>("PurchasingDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasingDepartmentId"), 1L, 1);

                    b.Property<int>("DealerProductFeatureSuggestionId")
                        .HasColumnType("int");

                    b.HasKey("PurchasingDepartmentId");

                    b.HasIndex("DealerProductFeatureSuggestionId");

                    b.ToTable("PurchasingDepartments");
                });

            modelBuilder.Entity("ERP.Entities.Models.PurchasingDepartmentPrice", b =>
                {
                    b.Property<int>("PurchasingDepartmentPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasingDepartmentPriceId"), 1L, 1);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmountPayableId")
                        .HasColumnType("int");

                    b.HasKey("PurchasingDepartmentPriceId");

                    b.HasIndex("StockId");

                    b.HasIndex("TotalAmountPayableId");

                    b.ToTable("PurchasingDepartmentPrices");
                });

            modelBuilder.Entity("ERP.Entities.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ERP.Entities.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("DealerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("ERP.Entities.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductFeature", b =>
                {
                    b.Property<int>("SupplierProductFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProductFeatureId"), 1L, 1);

                    b.Property<int>("ProductFeatureId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasingDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierProductFeatureId");

                    b.HasIndex("ProductFeatureId");

                    b.HasIndex("PurchasingDepartmentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProductFeatures");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductPrice", b =>
                {
                    b.Property<int>("SupplierProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProductPriceId"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierProductFeatureId")
                        .HasColumnType("int");

                    b.HasKey("SupplierProductPriceId");

                    b.HasIndex("SupplierProductFeatureId");

                    b.ToTable("SupplierProductPrices");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductSupplyContract", b =>
                {
                    b.Property<int>("SupplierProductSupplyContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProductSupplyContractId"), 1L, 1);

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SignedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierProductSupplyContractId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProductSupplyContracts");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierPurchaseServiceAgreement", b =>
                {
                    b.Property<int>("SupplierPurchaseServiceAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierPurchaseServiceAgreementId"), 1L, 1);

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<int>("PurchasingDepartmentPriceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SignedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierPurchaseServiceAgreementId");

                    b.HasIndex("PurchasingDepartmentPriceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPurchaseServiceAgreements");
                });

            modelBuilder.Entity("ERP.Entities.Models.TotalAmountPayable", b =>
                {
                    b.Property<int>("TotalAmountPayableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TotalAmountPayableId"), 1L, 1);

                    b.Property<int>("CostId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierProductPriceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmountPayablePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TotalAmountPayableId");

                    b.HasIndex("CostId");

                    b.HasIndex("SupplierProductPriceId");

                    b.ToTable("TotalAmountPayables");
                });

            modelBuilder.Entity("ERP.Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ERP.Entities.Models.Buy", b =>
                {
                    b.HasOne("ERP.Entities.Models.Customer", "Customer")
                        .WithMany("Buy")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.OfferForSale", "OfferForSale")
                        .WithMany("Buy")
                        .HasForeignKey("OfferForSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OfferForSale");
                });

            modelBuilder.Entity("ERP.Entities.Models.CustomerBankAccount", b =>
                {
                    b.HasOne("ERP.Entities.Models.Customer", "Customer")
                        .WithMany("CustomerBankAccount")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.CustomerPayment", "CustomerPayment")
                        .WithMany("CustomerBankAccount")
                        .HasForeignKey("CustomerPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerPayment");
                });

            modelBuilder.Entity("ERP.Entities.Models.CustomerPayment", b =>
                {
                    b.HasOne("ERP.Entities.Models.Buy", "Buy")
                        .WithMany("CustomerPayment")
                        .HasForeignKey("BuyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buy");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerBankAccount", b =>
                {
                    b.HasOne("ERP.Entities.Models.Dealer", "Dealer")
                        .WithMany("DealerBankAccount")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.FinanceDepartment", "FinanceDepartment")
                        .WithMany("DealerBankAccount")
                        .HasForeignKey("FinanceDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("FinanceDepartment");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerPayment", b =>
                {
                    b.HasOne("ERP.Entities.Models.Dealer", "Dealer")
                        .WithMany("DealerPayment")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductDemand", b =>
                {
                    b.HasOne("ERP.Entities.Models.Dealer", "Dealer")
                        .WithMany("DealerProductDemand")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.Product", "Product")
                        .WithMany("DealerProductDemand")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductFeatureSuggestion", b =>
                {
                    b.HasOne("ERP.Entities.Models.DealerProductDemand", "DealerProductDemand")
                        .WithMany("DealerProductFeatureSuggestion")
                        .HasForeignKey("DealerProductDemandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.ProductFeature", "ProductFeatures")
                        .WithMany("DealerProductFeatureSuggestion")
                        .HasForeignKey("ProductFeaturesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DealerProductDemand");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductSale", b =>
                {
                    b.HasOne("ERP.Entities.Models.Stock", "Stock")
                        .WithMany("DealerProductSale")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ERP.Entities.Models.FinanceDepartment", b =>
                {
                    b.HasOne("ERP.Entities.Models.PaymentConfirmation", "PaymentConfirmation")
                        .WithMany("FinanceDepartment")
                        .HasForeignKey("PaymentConfirmationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.Payment", "Payment")
                        .WithMany("FinanceDepartment")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.PurchasingDepartmentPrice", "PurchasingDepartmentPrice")
                        .WithMany("FinanceDepartment")
                        .HasForeignKey("PurchasingDepartmentPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentConfirmation");

                    b.Navigation("PurchasingDepartmentPrice");
                });

            modelBuilder.Entity("ERP.Entities.Models.OfferForSale", b =>
                {
                    b.HasOne("ERP.Entities.Models.DealerProductSale", "DealerProductSale")
                        .WithMany("OfferForSale")
                        .HasForeignKey("DealerProductSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DealerProductSale");
                });

            modelBuilder.Entity("ERP.Entities.Models.Payment", b =>
                {
                    b.HasOne("ERP.Entities.Models.DealerPayment", "DealerPayment")
                        .WithMany("Payment")
                        .HasForeignKey("DealerPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.ProductDelivery", "ProductDelivery")
                        .WithMany("Payment")
                        .HasForeignKey("ProductDeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DealerPayment");

                    b.Navigation("ProductDelivery");
                });

            modelBuilder.Entity("ERP.Entities.Models.PaymentConfirmation", b =>
                {
                    b.HasOne("ERP.Entities.Models.CustomerBankAccount", "CustomerBankAccount")
                        .WithMany("PaymentConfirmation")
                        .HasForeignKey("CustomerBankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerBankAccount");
                });

            modelBuilder.Entity("ERP.Entities.Models.PurchasingDepartment", b =>
                {
                    b.HasOne("ERP.Entities.Models.DealerProductFeatureSuggestion", "DealerProductFeatureSuggestion")
                        .WithMany("PurchasingDepartment")
                        .HasForeignKey("DealerProductFeatureSuggestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DealerProductFeatureSuggestion");
                });

            modelBuilder.Entity("ERP.Entities.Models.PurchasingDepartmentPrice", b =>
                {
                    b.HasOne("ERP.Entities.Models.Stock", null)
                        .WithMany("PurchasingDepartmentPrice")
                        .HasForeignKey("StockId");

                    b.HasOne("ERP.Entities.Models.TotalAmountPayable", "TotalAmountPayable")
                        .WithMany("PurchasingDepartmentPrice")
                        .HasForeignKey("TotalAmountPayableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TotalAmountPayable");
                });

            modelBuilder.Entity("ERP.Entities.Models.Stock", b =>
                {
                    b.HasOne("ERP.Entities.Models.Dealer", "Dealer")
                        .WithMany("Stock")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductFeature", b =>
                {
                    b.HasOne("ERP.Entities.Models.ProductFeature", "ProductFeature")
                        .WithMany("SupplierProductFeature")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.PurchasingDepartment", "PurchasingDepartment")
                        .WithMany("SupplierProductFeature")
                        .HasForeignKey("PurchasingDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.Supplier", "Supplier")
                        .WithMany("SupplierProductFeature")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductFeature");

                    b.Navigation("PurchasingDepartment");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductPrice", b =>
                {
                    b.HasOne("ERP.Entities.Models.SupplierProductFeature", "SupplierProductFeature")
                        .WithMany("SupplierProductPrice")
                        .HasForeignKey("SupplierProductFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupplierProductFeature");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductSupplyContract", b =>
                {
                    b.HasOne("ERP.Entities.Models.Product", "Product")
                        .WithMany("SupplierProductSupplyContract")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.Supplier", "Supplier")
                        .WithMany("SupplierProductSupplyContract")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierPurchaseServiceAgreement", b =>
                {
                    b.HasOne("ERP.Entities.Models.PurchasingDepartmentPrice", "PurchasingDepartmentPrice")
                        .WithMany("SupplierPurchaseServiceAgreement")
                        .HasForeignKey("PurchasingDepartmentPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.Supplier", "Supplier")
                        .WithMany("SupplierPurchaseServiceAgreement")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchasingDepartmentPrice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ERP.Entities.Models.TotalAmountPayable", b =>
                {
                    b.HasOne("ERP.Entities.Models.Cost", "Cost")
                        .WithMany("TotalAmountPayable")
                        .HasForeignKey("CostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Entities.Models.SupplierProductPrice", "SupplierProductPrice")
                        .WithMany("TotalAmountPayable")
                        .HasForeignKey("SupplierProductPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cost");

                    b.Navigation("SupplierProductPrice");
                });

            modelBuilder.Entity("ERP.Entities.Models.User", b =>
                {
                    b.HasOne("ERP.Entities.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ERP.Entities.Models.Buy", b =>
                {
                    b.Navigation("CustomerPayment");
                });

            modelBuilder.Entity("ERP.Entities.Models.Cost", b =>
                {
                    b.Navigation("TotalAmountPayable");
                });

            modelBuilder.Entity("ERP.Entities.Models.Customer", b =>
                {
                    b.Navigation("Buy");

                    b.Navigation("CustomerBankAccount");
                });

            modelBuilder.Entity("ERP.Entities.Models.CustomerBankAccount", b =>
                {
                    b.Navigation("PaymentConfirmation");
                });

            modelBuilder.Entity("ERP.Entities.Models.CustomerPayment", b =>
                {
                    b.Navigation("CustomerBankAccount");
                });

            modelBuilder.Entity("ERP.Entities.Models.Dealer", b =>
                {
                    b.Navigation("DealerBankAccount");

                    b.Navigation("DealerPayment");

                    b.Navigation("DealerProductDemand");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerPayment", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductDemand", b =>
                {
                    b.Navigation("DealerProductFeatureSuggestion");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductFeatureSuggestion", b =>
                {
                    b.Navigation("PurchasingDepartment");
                });

            modelBuilder.Entity("ERP.Entities.Models.DealerProductSale", b =>
                {
                    b.Navigation("OfferForSale");
                });

            modelBuilder.Entity("ERP.Entities.Models.FinanceDepartment", b =>
                {
                    b.Navigation("DealerBankAccount");
                });

            modelBuilder.Entity("ERP.Entities.Models.OfferForSale", b =>
                {
                    b.Navigation("Buy");
                });

            modelBuilder.Entity("ERP.Entities.Models.Payment", b =>
                {
                    b.Navigation("FinanceDepartment");
                });

            modelBuilder.Entity("ERP.Entities.Models.PaymentConfirmation", b =>
                {
                    b.Navigation("FinanceDepartment");
                });

            modelBuilder.Entity("ERP.Entities.Models.Product", b =>
                {
                    b.Navigation("DealerProductDemand");

                    b.Navigation("Stock");

                    b.Navigation("SupplierProductSupplyContract");
                });

            modelBuilder.Entity("ERP.Entities.Models.ProductDelivery", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ERP.Entities.Models.ProductFeature", b =>
                {
                    b.Navigation("DealerProductFeatureSuggestion");

                    b.Navigation("SupplierProductFeature");
                });

            modelBuilder.Entity("ERP.Entities.Models.PurchasingDepartment", b =>
                {
                    b.Navigation("SupplierProductFeature");
                });

            modelBuilder.Entity("ERP.Entities.Models.PurchasingDepartmentPrice", b =>
                {
                    b.Navigation("FinanceDepartment");

                    b.Navigation("SupplierPurchaseServiceAgreement");
                });

            modelBuilder.Entity("ERP.Entities.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ERP.Entities.Models.Stock", b =>
                {
                    b.Navigation("DealerProductSale");

                    b.Navigation("PurchasingDepartmentPrice");
                });

            modelBuilder.Entity("ERP.Entities.Models.Supplier", b =>
                {
                    b.Navigation("SupplierProductFeature");

                    b.Navigation("SupplierProductSupplyContract");

                    b.Navigation("SupplierPurchaseServiceAgreement");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductFeature", b =>
                {
                    b.Navigation("SupplierProductPrice");
                });

            modelBuilder.Entity("ERP.Entities.Models.SupplierProductPrice", b =>
                {
                    b.Navigation("TotalAmountPayable");
                });

            modelBuilder.Entity("ERP.Entities.Models.TotalAmountPayable", b =>
                {
                    b.Navigation("PurchasingDepartmentPrice");
                });
#pragma warning restore 612, 618
        }
    }
}
